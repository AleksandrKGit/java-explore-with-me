{
	"info": {
		"_postman_id": "37d96f71-b42f-44d2-81f1-1ffa4ef272e1",
		"name": "Explore With Me - Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24102371"
	},
	"item": [
		{
			"name": "Events",
			"item": [
				{
					"name": "Add",
					"item": [
						{
							"name": "Add with NULL commentsState",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event = rnd.getEvent(category.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(event),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 201 status code and json data\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.commentsState).equal(\"PUBLIC\", \"commentsState should be PUBLIC by default\");\r",
											"    pm.expect(target.publishedComments).equal(0, \"publishedComments should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add with PUBLIC commentsState",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event = rnd.getEvent(category.id, \"PUBLIC\");\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(event),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 201 status code and json data\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.commentsState).equal(source.commentsState, \"commentsState should be equal to commentsState in request\");\r",
											"    pm.expect(target.publishedComments).equal(0, \"publishedComments should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add with NOT_ALLOWED commentsState",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event = rnd.getEvent(category.id, \"NOT_ALLOWED\");\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(event),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 201 status code and json data\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.commentsState).equal(source.commentsState, \"commentsState should be equal to commentsState in request\");\r",
											"    pm.expect(target.publishedComments).equal(0, \"publishedComments should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add with MODERATED commentsState",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event = rnd.getEvent(category.id, \"MODERATED\");\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(event),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 201 status code and json data\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.commentsState).equal(source.commentsState, \"commentsState should be equal to commentsState in request\");\r",
											"    pm.expect(target.publishedComments).equal(0, \"publishedComments should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add with incorrect commentsState",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id)\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        event = rnd.getEvent(category.id, \"INCORRECT\");\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(event),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Update by Initiator",
					"item": [
						{
							"name": "Update with NULL commentsState",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id)\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.collectionVariables.set(\"response\", event);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"                commentsState: null\r",
											"            }),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get(\"response\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.commentsState).equal(source.commentsState, \"commentsState should not be updated\");\r",
											"    pm.expect(target.publishedComments).equal(0, \"publishedComments should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) current event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with PUBLIC commentsState",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    let comState = \"PUBLIC\";\r",
											"    pm.collectionVariables.set(\"commentsState\", comState);\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id)\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.collectionVariables.set(\"response\", event);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"                commentsState: comState\r",
											"            }),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get(\"response\");\r",
											"const target = pm.response.json();\r",
											"const comState = pm.collectionVariables.get(\"commentsState\");\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.commentsState).equal(comState, \"commentsState should be equal to commentsState in request\");\r",
											"    pm.expect(target.publishedComments).equal(0, \"publishedComments should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) current event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with NOT_ALLOWED commentsState",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    let comState = \"NOT_ALLOWED\";\r",
											"    pm.collectionVariables.set(\"commentsState\", comState);\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id)\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.collectionVariables.set(\"response\", event);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"                commentsState: comState\r",
											"            }),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get(\"response\");\r",
											"const target = pm.response.json();\r",
											"const comState = pm.collectionVariables.get(\"commentsState\");\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.commentsState).equal(comState, \"commentsState should be equal to commentsState in request\");\r",
											"    pm.expect(target.publishedComments).equal(0, \"publishedComments should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) current event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with MODERATED commentsState",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    let comState = \"MODERATED\";\r",
											"    pm.collectionVariables.set(\"commentsState\", comState);\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id)\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.collectionVariables.set(\"response\", event);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"                commentsState: comState\r",
											"            }),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get(\"response\");\r",
											"const target = pm.response.json();\r",
											"const comState = pm.collectionVariables.get(\"commentsState\");\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.commentsState).equal(comState, \"commentsState should be equal to commentsState in request\");\r",
											"    pm.expect(target.publishedComments).equal(0, \"publishedComments should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) current event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with incorrect commentsState",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    let comState = \"INCORRECT\";\r",
											"    pm.collectionVariables.set(\"commentsState\", comState);\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id)\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.collectionVariables.set(\"response\", event);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"                commentsState: comState\r",
											"            }),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) current event id"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update by Admin",
					"item": [
						{
							"name": "Update with NULL commentsState",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.collectionVariables.set(\"response\", event);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"                commentsState: null\r",
											"            }),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get(\"response\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.commentsState).equal(source.commentsState, \"commentsState should not be updated\");\r",
											"    pm.expect(target.publishedComments).equal(0, \"publishedComments should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) current event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with PUBLIC commentsState",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    let comState = \"PUBLIC\";\r",
											"    pm.collectionVariables.set(\"commentsState\", comState);\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.collectionVariables.set(\"response\", event);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"                commentsState: comState\r",
											"            }),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get(\"response\");\r",
											"const target = pm.response.json();\r",
											"const comState = pm.collectionVariables.get(\"commentsState\");\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.commentsState).equal(comState, \"commentsState should be equal to commentsState in request\");\r",
											"    pm.expect(target.publishedComments).equal(0, \"publishedComments should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) current event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with NOT_ALLOWED commentsState",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    let comState = \"NOT_ALLOWED\";\r",
											"    pm.collectionVariables.set(\"commentsState\", comState);\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.collectionVariables.set(\"response\", event);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"                commentsState: comState\r",
											"            }),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get(\"response\");\r",
											"const target = pm.response.json();\r",
											"const comState = pm.collectionVariables.get(\"commentsState\");\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.commentsState).equal(comState, \"commentsState should be equal to commentsState in request\");\r",
											"    pm.expect(target.publishedComments).equal(0, \"publishedComments should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) current event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with MODERATED commentsState",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    let comState = \"MODERATED\";\r",
											"    pm.collectionVariables.set(\"commentsState\", comState);\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.collectionVariables.set(\"response\", event);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"                commentsState: comState\r",
											"            }),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get(\"response\");\r",
											"const target = pm.response.json();\r",
											"const comState = pm.collectionVariables.get(\"commentsState\");\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.commentsState).equal(comState, \"commentsState should be equal to commentsState in request\");\r",
											"    pm.expect(target.publishedComments).equal(0, \"publishedComments should be 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) current event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with incorrect commentsState",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    let comState = \"INCORRECT\";\r",
											"    pm.collectionVariables.set(\"commentsState\", comState);\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.collectionVariables.set(\"response\", event);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"                commentsState: comState\r",
											"            }),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) current event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update commentsState after publishing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        api.publishEvent(event.id, verbose=null);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"                commentsState: \"MODERATED\"\r",
											"            }),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 409 status code and json data\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"FORBIDDEN\", \"status should be FORBIDDEN\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) current event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update after publishing",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.addComment(initiator.id, event.id, rnd.getComment());\r",
											"\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.collectionVariables.set(\"event\", event);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"                commentsState: null\r",
											"            }),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get(\"event\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.commentsState).equal(source.commentsState, \"commentsState should not be updated\");\r",
											"    pm.expect(target.publishedComments).equal(2, \"publishedComments should be 2\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) current event id"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get",
					"item": [
						{
							"name": "Public Get Event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.addComment(initiator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch event data\", function () {\r",
											"    pm.expect(target.commentsState).equal(\"PUBLIC\", \"commentsState should be equal to PUBLIC\");\r",
											"    pm.expect(target.publishedComments).equal(2, \"publishedComments should be equal to 2\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Private Get Event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.addComment(initiator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch event data\", function () {\r",
											"    pm.expect(target.commentsState).equal(\"PUBLIC\", \"commentsState should be equal to PUBLIC\");\r",
											"    pm.expect(target.publishedComments).equal(2, \"publishedComments should be equal to 2\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) user id"
										},
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Public Find Events",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.addComment(initiator.id, event.id, rnd.getComment());\r",
											"        pm.request.addQueryParams([`categories=` + category.id]);        \r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Result should contain 1 event\", function () {\r",
											"    pm.expect(target.length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target[0]).to.have.property('commentsState');\r",
											"    pm.expect(target[0]).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch event data\", function () {\r",
											"    pm.expect(target[0].commentsState).equal(\"PUBLIC\", \"commentsState should be equal to PUBLIC\");\r",
											"    pm.expect(target[0].publishedComments).equal(2, \"publishedComments should be equal to 2\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin Find Events",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.addComment(initiator.id, event.id, rnd.getComment());\r",
											"        pm.request.addQueryParams([`categories=` + category.id]);        \r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Result should contain 1 event\", function () {\r",
											"    pm.expect(target.length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target[0]).to.have.property('commentsState');\r",
											"    pm.expect(target[0]).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch event data\", function () {\r",
											"    pm.expect(target[0].commentsState).equal(\"PUBLIC\", \"commentsState should be equal to PUBLIC\");\r",
											"    pm.expect(target[0].publishedComments).equal(2, \"publishedComments should be equal to 2\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/admin/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Private Find Events",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.addComment(initiator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Result should contain 1 event\", function () {\r",
											"    pm.expect(target.length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target[0]).to.have.property('commentsState');\r",
											"    pm.expect(target[0]).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch event data\", function () {\r",
											"    pm.expect(target[0].commentsState).equal(\"PUBLIC\", \"commentsState should be equal to PUBLIC\");\r",
											"    pm.expect(target[0].publishedComments).equal(2, \"publishedComments should be equal to 2\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) user id"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Add",
					"item": [
						{
							"name": "Add with incorrect userId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"userId\", \"incorrect\");\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "0",
											"description": "(Required) event id"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add with incorrect eventId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + \"incorrect\"]);\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "0",
											"description": "(Required) event id"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add with null text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
											"        comment = {text: null};\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "0",
											"description": "(Required) event id"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add with blank text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
											"        comment = {text: \" \\t \\r\\n \"};\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "0",
											"description": "(Required) event id"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add with big text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
											"        comment = {text: \"a\".repeat(2001)};\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "0",
											"description": "(Required) event id"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add with not existing userId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"userId\", 0);\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 404 status code and json data\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"NOT_FOUND\", \"status should be NOT_FOUND\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "0",
											"description": "(Required) event id"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add with not existing eventId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 404 status code and json data\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"NOT_FOUND\", \"status should be NOT_FOUND\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "0",
											"description": "(Required) event id"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add to not published event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 409 status code and json data\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"CONFLICT\", \"status should be CONFLICT\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "0",
											"description": "(Required) event id"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add with not allowed comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"NOT_ALLOWED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 409 status code and json data\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"CONFLICT\", \"status should be CONFLICT\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "0",
											"description": "(Required) event id"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add by initiator with not allowed comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"NOT_ALLOWED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
											"        comment = rnd.getComment();\r",
											"        const moment = require('moment');\r",
											"        pm.collectionVariables.set(\"currentDate\", moment().format('YYYY-MM-DDTHH:mm:ss'));\r",
											"        pm.collectionVariables.set(\"event\", event);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 201 status code and json data\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const moment = require('moment');\r",
											"const from = new Date(pm.collectionVariables.get(\"currentDate\"));\r",
											"const to = new Date(moment().format('YYYY-MM-DDTHH:mm:ss'));\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const sourceEvent = pm.collectionVariables.get(\"event\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Comment should contain fields: id, event, createdOn, text, state\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('event');\r",
											"    pm.expect(target).to.have.property('createdOn');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"    pm.expect(target).to.have.property('state');\r",
											"});\r",
											"\r",
											"pm.test(\"Event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"    pm.expect(target.event).to.have.property('id');\r",
											"    pm.expect(target.event).to.have.property('title');\r",
											"    pm.expect(target.event).to.have.property('eventDate');\r",
											"    pm.expect(target.event).to.have.property('commentsState');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.id).not.to.be.null;\r",
											"    pm.expect(new Date(target.createdOn), 'createdOn').not.to.be.lessThan(from);\r",
											"    pm.expect(new Date(target.createdOn), 'createdOn').not.to.be.greaterThan(to);\r",
											"    pm.expect(target.text).equal(source.text, \"text should be equal to text in request\");\r",
											"    pm.expect(target.state).equal(\"PUBLISHED\", \"state should be PUBLISHED\");\r",
											"    pm.expect(target.event.id).equal(sourceEvent.id, \"event id should be equal to id of selected event\");\r",
											"    pm.expect(target.event.title).equal(sourceEvent.title, \"event title should be equal to title of selected event\");\r",
											"    pm.expect(target.event.eventDate).equal(sourceEvent.eventDate, \"event date should be equal to eventDate of selected event\");\r",
											"    pm.expect(target.event.commentsState).equal(sourceEvent.commentsState, \"event commentsState should be equal to commentsState of selected event\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "0",
											"description": "(Required) event id"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add to event with public comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
											"        comment = rnd.getComment();\r",
											"        const moment = require('moment');\r",
											"        pm.collectionVariables.set(\"currentDate\", moment().format('YYYY-MM-DDTHH:mm:ss'));\r",
											"        pm.collectionVariables.set(\"event\", event);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 201 status code and json data\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const moment = require('moment');\r",
											"const from = new Date(pm.collectionVariables.get(\"currentDate\"));\r",
											"const to = new Date(moment().format('YYYY-MM-DDTHH:mm:ss'));\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const sourceEvent = pm.collectionVariables.get(\"event\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Comment should contain fields: id, event, createdOn, text, state\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('event');\r",
											"    pm.expect(target).to.have.property('createdOn');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"    pm.expect(target).to.have.property('state');\r",
											"});\r",
											"\r",
											"pm.test(\"Event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"    pm.expect(target.event).to.have.property('id');\r",
											"    pm.expect(target.event).to.have.property('title');\r",
											"    pm.expect(target.event).to.have.property('eventDate');\r",
											"    pm.expect(target.event).to.have.property('commentsState');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.id).not.to.be.null;\r",
											"    pm.expect(new Date(target.createdOn), 'createdOn').not.to.be.lessThan(from);\r",
											"    pm.expect(new Date(target.createdOn), 'createdOn').not.to.be.greaterThan(to);\r",
											"    pm.expect(target.text).equal(source.text, \"text should be equal to text in request\");\r",
											"    pm.expect(target.state).equal(\"PUBLISHED\", \"state should be PUBLISHED\");\r",
											"    pm.expect(target.event.id).equal(sourceEvent.id, \"event id should be equal to id of selected event\");\r",
											"    pm.expect(target.event.title).equal(sourceEvent.title, \"event title should be equal to title of selected event\");\r",
											"    pm.expect(target.event.eventDate).equal(sourceEvent.eventDate, \"event date should be equal to eventDate of selected event\");\r",
											"    pm.expect(target.event.commentsState).equal(sourceEvent.commentsState, \"event commentsState should be equal to commentsState of selected event\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "0",
											"description": "(Required) event id"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add to event with moderated comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + event.id]);\r",
											"        comment = rnd.getComment();\r",
											"        const moment = require('moment');\r",
											"        pm.collectionVariables.set(\"currentDate\", moment().format('YYYY-MM-DDTHH:mm:ss'));\r",
											"        pm.collectionVariables.set(\"event\", event);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 201 status code and json data\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const moment = require('moment');\r",
											"const from = new Date(pm.collectionVariables.get(\"currentDate\"));\r",
											"const to = new Date(moment().format('YYYY-MM-DDTHH:mm:ss'));\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const sourceEvent = pm.collectionVariables.get(\"event\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Comment should contain fields: id, event, createdOn, text, state\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('event');\r",
											"    pm.expect(target).to.have.property('createdOn');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"    pm.expect(target).to.have.property('state');\r",
											"});\r",
											"\r",
											"pm.test(\"Event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"    pm.expect(target.event).to.have.property('id');\r",
											"    pm.expect(target.event).to.have.property('title');\r",
											"    pm.expect(target.event).to.have.property('eventDate');\r",
											"    pm.expect(target.event).to.have.property('commentsState');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.id).not.to.be.null;\r",
											"    pm.expect(new Date(target.createdOn), 'createdOn').not.to.be.lessThan(from);\r",
											"    pm.expect(new Date(target.createdOn), 'createdOn').not.to.be.greaterThan(to);\r",
											"    pm.expect(target.text).equal(source.text, \"text should be equal to text in request\");\r",
											"    pm.expect(target.state).equal(\"PENDING\", \"state should be PENDING\");\r",
											"    pm.expect(target.event.id).equal(sourceEvent.id, \"event id should be equal to id of selected event\");\r",
											"    pm.expect(target.event.title).equal(sourceEvent.title, \"event title should be equal to title of selected event\");\r",
											"    pm.expect(target.event.eventDate).equal(sourceEvent.eventDate, \"event date should be equal to eventDate of selected event\");\r",
											"    pm.expect(target.event.commentsState).equal(sourceEvent.commentsState, \"event commentsState should be equal to commentsState of selected event\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "0",
											"description": "(Required) event id"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get event after adding public comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.addComment(initiator.id, event.id, rnd.getComment());\r",
											"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch event data\", function () {\r",
											"    pm.expect(target.commentsState).equal(\"PUBLIC\", \"commentsState should be equal to PUBLIC\");\r",
											"    pm.expect(target.publishedComments).equal(2, \"publishedComments should be equal to 2\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get event after adding public and moderated comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        await api.addComment(initiator.id, event.id, rnd.getComment());\r",
											"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch event data\", function () {\r",
											"    pm.expect(target.commentsState).equal(\"MODERATED\", \"commentsState should be equal to MODERATED\");\r",
											"    pm.expect(target.publishedComments).equal(1, \"publishedComments should be equal to 1\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) event id"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Publish",
					"item": [
						{
							"name": "Publish with incorrect userId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"userId\", \"incorrect\");\r",
											"        pm.request.removeQueryParams(['ids']);\r",
											"        pm.request.addQueryParams([`ids=` + comment.id]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/publish?ids=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"publish"
									],
									"query": [
										{
											"key": "ids",
											"value": "0",
											"description": "(Required) comments ids"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Publish with incorrect ids",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.request.removeQueryParams(['ids']);\r",
											"        pm.request.addQueryParams([`ids=` + \"incorrect\"]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/publish?ids=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"publish"
									],
									"query": [
										{
											"key": "ids",
											"value": "0",
											"description": "(Required) comments ids"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Publish with not existing commentId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.request.removeQueryParams(['ids']);\r",
											"        pm.request.addQueryParams([`ids=` + comment.id + \",0\"]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 404 status code and json data\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"NOT_FOUND\", \"status should be NOT_FOUND\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/publish?ids=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"publish"
									],
									"query": [
										{
											"key": "ids",
											"value": "0",
											"description": "(Required) comments ids"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Publish with not pending commentId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const comment1 = await api.addComment(initiator.id, event.id, rnd.getComment());\r",
											"        const comment2 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.request.removeQueryParams(['ids']);\r",
											"        pm.request.addQueryParams([`ids=` + comment1.id + \",\" + comment2.id]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 404 status code and json data\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"NOT_FOUND\", \"status should be NOT_FOUND\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/publish?ids=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"publish"
									],
									"query": [
										{
											"key": "ids",
											"value": "0",
											"description": "(Required) comments ids"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Publish pending comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const comment1 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment2 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        comment1.commentator = commentator;\r",
											"        comment2.commentator = commentator;\r",
											"        pm.collectionVariables.set(\"comments\", [comment2, comment1]);\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.request.removeQueryParams(['ids']);\r",
											"        pm.request.addQueryParams([`ids=` + comment1.id + \",\" + comment2.id]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const comments = pm.collectionVariables.get(\"comments\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Result should contain correct number of comments\", function () {\r",
											"    pm.expect(target.length).to.eql(comments.length);\r",
											"});\r",
											"\r",
											"for (i = 0; i < comments.length; i++) {\r",
											"    var source = comments[i];\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] should contain fields: id, event, createdOn, text, state\", function () {\r",
											"        pm.expect(target[i]).to.have.property('id');\r",
											"        pm.expect(target[i]).to.have.property('event');\r",
											"        pm.expect(target[i]).to.have.property('createdOn');\r",
											"        pm.expect(target[i]).to.have.property('text');\r",
											"        pm.expect(target[i]).to.have.property('state');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"        pm.expect(target[i].event).to.have.property('id');\r",
											"        pm.expect(target[i].event).to.have.property('title');\r",
											"        pm.expect(target[i].event).to.have.property('eventDate');\r",
											"        pm.expect(target[i].event).to.have.property('commentsState');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].commentator should contain fields: id, name\", function () {\r",
											"        pm.expect(target[i].commentator).to.have.property('id');\r",
											"        pm.expect(target[i].commentator).to.have.property('name');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] data should mutch request data\", function () {\r",
											"        pm.expect(target[i].id).equal(source.id, \"result[\" + i + \"].id should be equal to comment`s id\");\r",
											"        pm.expect(target[i].commentator.id).equal(source.commentator.id, \"result[\" + i + \"].commentator.id should be equal to commentator id\");\r",
											"        pm.expect(target[i].commentator.name).equal(source.commentator.name, \"result[\" + i + \"].commentator.name should be equal to commentator name\");\r",
											"        pm.expect(target[i].createdOn).equal(source.createdOn, \"result[\" + i + \"].createdOn should be equal to comment`s createdOn\");\r",
											"        pm.expect(target[i].text).equal(source.text, \"result[\" + i + \"].text should be equal to comment`s text\");\r",
											"        pm.expect(target[i].state).equal(\"PUBLISHED\", \"result[\" + i + \"].text should be PUBLISHED\");\r",
											"        pm.expect(target[i].event.id).equal(source.event.id, \"result[\" + i + \"].event.id should be equal to id of comment`s event\");\r",
											"        pm.expect(target[i].event.title).equal(source.event.title, \"result[\" + i + \"].event.title should be equal to title of comment`s event\");\r",
											"        pm.expect(target[i].event.eventDate).equal(source.event.eventDate, \"result[\" + i + \"].event.date should be equal to eventDate of comment`s event\");\r",
											"        pm.expect(target[i].event.commentsState).equal(source.event.commentsState, \"result[\" + i + \"].event.commentsState should be equal to commentsState of comment`s event\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/publish?ids=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"publish"
									],
									"query": [
										{
											"key": "ids",
											"value": "0",
											"description": "(Required) comments ids"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get event after publishing comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const comment1 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        const comment2 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.publishComments(initiator.id, [comment1.id, comment2.id]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch event data\", function () {\r",
											"    pm.expect(target.commentsState).equal(\"MODERATED\", \"commentsState should be equal to MODERATED\");\r",
											"    pm.expect(target.publishedComments).equal(2, \"publishedComments should be equal to 2\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) event id"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reject",
					"item": [
						{
							"name": "Reject with incorrect userId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"userId\", \"incorrect\");\r",
											"        pm.request.removeQueryParams(['ids']);\r",
											"        pm.request.addQueryParams([`ids=` + comment.id]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/reject?ids=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"reject"
									],
									"query": [
										{
											"key": "ids",
											"value": "0",
											"description": "(Required) comments ids"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reject with incorrect ids",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.request.removeQueryParams(['ids']);\r",
											"        pm.request.addQueryParams([`ids=` + \"incorrect\"]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/reject?ids=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"reject"
									],
									"query": [
										{
											"key": "ids",
											"value": "0",
											"description": "(Required) comments ids"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reject with not existing commentId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.request.removeQueryParams(['ids']);\r",
											"        pm.request.addQueryParams([`ids=` + comment.id + \",0\"]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 404 status code and json data\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"NOT_FOUND\", \"status should be NOT_FOUND\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/reject?ids=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"reject"
									],
									"query": [
										{
											"key": "ids",
											"value": "0",
											"description": "(Required) comments ids"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reject initiator's comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const comment1 = await api.addComment(initiator.id, event.id, rnd.getComment());\r",
											"        const comment2 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.request.removeQueryParams(['ids']);\r",
											"        pm.request.addQueryParams([`ids=` + comment1.id + \",\" + comment2.id]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 404 status code and json data\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"NOT_FOUND\", \"status should be NOT_FOUND\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/reject?ids=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"reject"
									],
									"query": [
										{
											"key": "ids",
											"value": "0",
											"description": "(Required) comments ids"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reject rejected comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const comment1 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        const comment2 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.rejectComments(initiator.id, comment2.id);\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.request.removeQueryParams(['ids']);\r",
											"        pm.request.addQueryParams([`ids=` + comment1.id + \",\" + comment2.id]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 404 status code and json data\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"NOT_FOUND\", \"status should be NOT_FOUND\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/reject?ids=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"reject"
									],
									"query": [
										{
											"key": "ids",
											"value": "0",
											"description": "(Required) comments ids"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reject public and pending comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const comment1 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment2 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.publishComments(initiator.id, comment2.id);\r",
											"        comment1.commentator = commentator;\r",
											"        comment2.commentator = commentator;\r",
											"        pm.collectionVariables.set(\"comments\", [comment2, comment1]);\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.request.removeQueryParams(['ids']);\r",
											"        pm.request.addQueryParams([`ids=` + comment1.id + \",\" + comment2.id]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const comments = pm.collectionVariables.get(\"comments\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Result should contain correct number of comments\", function () {\r",
											"    pm.expect(target.length).to.eql(comments.length);\r",
											"});\r",
											"\r",
											"for (i = 0; i < comments.length; i++) {\r",
											"    var source = comments[i];\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] should contain fields: id, event, createdOn, text, state\", function () {\r",
											"        pm.expect(target[i]).to.have.property('id');\r",
											"        pm.expect(target[i]).to.have.property('event');\r",
											"        pm.expect(target[i]).to.have.property('createdOn');\r",
											"        pm.expect(target[i]).to.have.property('text');\r",
											"        pm.expect(target[i]).to.have.property('state');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"        pm.expect(target[i].event).to.have.property('id');\r",
											"        pm.expect(target[i].event).to.have.property('title');\r",
											"        pm.expect(target[i].event).to.have.property('eventDate');\r",
											"        pm.expect(target[i].event).to.have.property('commentsState');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].commentator should contain fields: id, name\", function () {\r",
											"        pm.expect(target[i].commentator).to.have.property('id');\r",
											"        pm.expect(target[i].commentator).to.have.property('name');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] data should mutch request data\", function () {\r",
											"        pm.expect(target[i].id).equal(source.id, \"result[\" + i + \"].id should be equal to comment`s id\");\r",
											"        pm.expect(target[i].commentator.id).equal(source.commentator.id, \"result[\" + i + \"].commentator.id should be equal to commentator id\");\r",
											"        pm.expect(target[i].commentator.name).equal(source.commentator.name, \"result[\" + i + \"].commentator.name should be equal to commentator name\");\r",
											"        pm.expect(target[i].createdOn).equal(source.createdOn, \"result[\" + i + \"].createdOn should be equal to comment`s createdOn\");\r",
											"        pm.expect(target[i].text).equal(source.text, \"result[\" + i + \"].text should be equal to comment`s text\");\r",
											"        pm.expect(target[i].state).equal(\"REJECTED\", \"result[\" + i + \"].text should be REJECTED\");\r",
											"        pm.expect(target[i].event.id).equal(source.event.id, \"result[\" + i + \"].event.id should be equal to id of comment`s event\");\r",
											"        pm.expect(target[i].event.title).equal(source.event.title, \"result[\" + i + \"].event.title should be equal to title of comment`s event\");\r",
											"        pm.expect(target[i].event.eventDate).equal(source.event.eventDate, \"result[\" + i + \"].event.date should be equal to eventDate of comment`s event\");\r",
											"        pm.expect(target[i].event.commentsState).equal(source.event.commentsState, \"result[\" + i + \"].event.commentsState should be equal to commentsState of comment`s event\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/reject?ids=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"reject"
									],
									"query": [
										{
											"key": "ids",
											"value": "0",
											"description": "(Required) comments ids"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get event after rejecting comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const comment1 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        const comment2 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.publishComments(initiator.id, [comment1.id, comment2.id]);\r",
											"        await api.rejectComments(initiator.id, [comment1.id, comment2.id]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch event data\", function () {\r",
											"    pm.expect(target.commentsState).equal(\"MODERATED\", \"commentsState should be equal to MODERATED\");\r",
											"    pm.expect(target.publishedComments).equal(0, \"publishedComments should be equal to 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) event id"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update",
					"item": [
						{
							"name": "Update with incorrect userId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const existingComment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        comment = rnd.getComment();\r",
											"        pm.collectionVariables.set(\"userId\", \"incorrect\");\r",
											"        pm.collectionVariables.set(\"commentId\", existingComment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with incorrect commentId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        comment = rnd.getComment();\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.collectionVariables.set(\"commentId\", \"incorrect\");\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with null text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const existingComment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        comment = {text:null};\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.collectionVariables.set(\"commentId\", existingComment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with blank text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const existingComment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        comment = {text:\" \\t \\r\\n \"};\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.collectionVariables.set(\"commentId\", existingComment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with big text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const existingComment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        comment = {text:\"a\".repeat(2001)};\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.collectionVariables.set(\"commentId\", existingComment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with not existing userId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const existingComment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        comment = rnd.getComment();\r",
											"        pm.collectionVariables.set(\"userId\", 0);\r",
											"        pm.collectionVariables.set(\"commentId\", existingComment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 404 status code and json data\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"NOT_FOUND\", \"status should be NOT_FOUND\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update with not existing commentId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        comment = rnd.getComment();\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.collectionVariables.set(\"commentId\", 0);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 404 status code and json data\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"NOT_FOUND\", \"status should be NOT_FOUND\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update by other user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const existingComment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        comment = rnd.getComment();\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.collectionVariables.set(\"commentId\", existingComment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 404 status code and json data\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"NOT_FOUND\", \"status should be NOT_FOUND\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update published comment to event with moderated comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const existingComment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.publishComments(initiator.id, existingComment.id);\r",
											"        comment = rnd.getComment();\r",
											"        pm.collectionVariables.set(\"comments\", existingComment);\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.collectionVariables.set(\"commentId\", existingComment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get(\"comments\");\r",
											"const sourceUpdate = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Comment should contain fields: id, event, createdOn, text, state\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('event');\r",
											"    pm.expect(target).to.have.property('createdOn');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"    pm.expect(target).to.have.property('state');\r",
											"});\r",
											"\r",
											"pm.test(\"Event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"    pm.expect(target.event).to.have.property('id');\r",
											"    pm.expect(target.event).to.have.property('title');\r",
											"    pm.expect(target.event).to.have.property('eventDate');\r",
											"    pm.expect(target.event).to.have.property('commentsState');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.id).equal(source.id, \"id should be equal to updating comment`s id\");\r",
											"    pm.expect(target.createdOn).equal(source.createdOn, \"createdOn should be equal to updating comment`s createdOn\");\r",
											"    pm.expect(target.text).equal(sourceUpdate.text, \"text should be equal to text in request\");\r",
											"    pm.expect(target.state).equal(\"PENDING\", \"state should be PENDING\");\r",
											"    pm.expect(target.event.id).equal(source.event.id, \"event id should be equal to id of selected event\");\r",
											"    pm.expect(target.event.title).equal(source.event.title, \"event title should be equal to title of selected event\");\r",
											"    pm.expect(target.event.eventDate).equal(source.event.eventDate, \"event date should be equal to eventDate of selected event\");\r",
											"    pm.expect(target.event.commentsState).equal(source.event.commentsState, \"event commentsState should be equal to commentsState of selected event\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update rejected comment to event with moderated comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const existingComment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.rejectComments(initiator.id, existingComment.id);\r",
											"        comment = rnd.getComment();\r",
											"        pm.collectionVariables.set(\"comments\", existingComment);\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.collectionVariables.set(\"commentId\", existingComment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get(\"comments\");\r",
											"const sourceUpdate = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Comment should contain fields: id, event, createdOn, text, state\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('event');\r",
											"    pm.expect(target).to.have.property('createdOn');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"    pm.expect(target).to.have.property('state');\r",
											"});\r",
											"\r",
											"pm.test(\"Event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"    pm.expect(target.event).to.have.property('id');\r",
											"    pm.expect(target.event).to.have.property('title');\r",
											"    pm.expect(target.event).to.have.property('eventDate');\r",
											"    pm.expect(target.event).to.have.property('commentsState');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.id).equal(source.id, \"id should be equal to updating comment`s id\");\r",
											"    pm.expect(target.createdOn).equal(source.createdOn, \"createdOn should be equal to updating comment`s createdOn\");\r",
											"    pm.expect(target.text).equal(sourceUpdate.text, \"text should be equal to text in request\");\r",
											"    pm.expect(target.state).equal(\"PENDING\", \"state should be PENDING\");\r",
											"    pm.expect(target.event.id).equal(source.event.id, \"event id should be equal to id of selected event\");\r",
											"    pm.expect(target.event.title).equal(source.event.title, \"event title should be equal to title of selected event\");\r",
											"    pm.expect(target.event.eventDate).equal(source.event.eventDate, \"event date should be equal to eventDate of selected event\");\r",
											"    pm.expect(target.event.commentsState).equal(source.event.commentsState, \"event commentsState should be equal to commentsState of selected event\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update rejected comment to event with public comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const existingComment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.rejectComments(initiator.id, existingComment.id);\r",
											"        comment = rnd.getComment();\r",
											"        pm.collectionVariables.set(\"comments\", existingComment);\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.collectionVariables.set(\"commentId\", existingComment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get(\"comments\");\r",
											"const sourceUpdate = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Comment should contain fields: id, event, createdOn, text, state\", function () {\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('event');\r",
											"    pm.expect(target).to.have.property('createdOn');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"    pm.expect(target).to.have.property('state');\r",
											"});\r",
											"\r",
											"pm.test(\"Event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"    pm.expect(target.event).to.have.property('id');\r",
											"    pm.expect(target.event).to.have.property('title');\r",
											"    pm.expect(target.event).to.have.property('eventDate');\r",
											"    pm.expect(target.event).to.have.property('commentsState');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch request data\", function () {\r",
											"    pm.expect(target.id).equal(source.id, \"id should be equal to updating comment`s id\");\r",
											"    pm.expect(target.createdOn).equal(source.createdOn, \"createdOn should be equal to updating comment`s createdOn\");\r",
											"    pm.expect(target.text).equal(sourceUpdate.text, \"text should be equal to text in request\");\r",
											"    pm.expect(target.state).equal(\"PUBLISHED\", \"state should be PUBLISHED\");\r",
											"    pm.expect(target.event.id).equal(source.event.id, \"event id should be equal to id of selected event\");\r",
											"    pm.expect(target.event.title).equal(source.event.title, \"event title should be equal to title of selected event\");\r",
											"    pm.expect(target.event.eventDate).equal(source.event.eventDate, \"event date should be equal to eventDate of selected event\");\r",
											"    pm.expect(target.event.commentsState).equal(source.event.commentsState, \"event commentsState should be equal to commentsState of selected event\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get event after updating published comment to event with moderated comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.publishComments(initiator.id, comment.id);\r",
											"        await api.updateComment(commentator.id, comment.id, rnd.getComment());\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch event data\", function () {\r",
											"    pm.expect(target.commentsState).equal(\"MODERATED\", \"commentsState should be equal to MODERATED\");\r",
											"    pm.expect(target.publishedComments).equal(0, \"publishedComments should be equal to 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get event after updating rejected comment to event with public comments",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.rejectComments(initiator.id, comment.id);\r",
											"        await api.updateComment(commentator.id, comment.id, rnd.getComment());\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch event data\", function () {\r",
											"    pm.expect(target.commentsState).equal(\"PUBLIC\", \"commentsState should be equal to PUBLIC\");\r",
											"    pm.expect(target.publishedComments).equal(1, \"publishedComments should be equal to 1\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) event id"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete by Commentator",
					"item": [
						{
							"name": "Delete with incorrect userId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"userId\", \"incorrect\");\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete with incorrect commentId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.collectionVariables.set(\"commentId\", \"incorrect\");\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete with not existing userId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"userId\", 0);\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 404 status code and json data\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"NOT_FOUND\", \"status should be NOT_FOUND\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete with not existing commentId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.collectionVariables.set(\"commentId\", 0);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 404 status code and json data\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"NOT_FOUND\", \"status should be NOT_FOUND\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete by other user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 404 status code and json data\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"NOT_FOUND\", \"status should be NOT_FOUND\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 204 status code and empty body\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.response.to.be.not.withBody;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) current user id"
										},
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comments after deleting",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.deleteCommentByCommentator(commentator.id, comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Result should be empty list\", function () {\r",
											"    pm.expect(pm.response.json().length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get event after deleting published comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.deleteCommentByCommentator(commentator.id, comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch event data\", function () {\r",
											"    pm.expect(target.commentsState).equal(\"PUBLIC\", \"commentsState should be equal to PUBLIC\");\r",
											"    pm.expect(target.publishedComments).equal(0, \"publishedComments should be equal to 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get event after deleting pending comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const comment1 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        const comment2 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.addComment(initiator.id, event.id, rnd.getComment());\r",
											"        await api.publishComments(initiator.id, comment1.id);\r",
											"        await api.deleteCommentByCommentator(commentator.id, comment2.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch event data\", function () {\r",
											"    pm.expect(target.commentsState).equal(\"MODERATED\", \"commentsState should be equal to MODERATED\");\r",
											"    pm.expect(target.publishedComments).equal(2, \"publishedComments should be equal to 2\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) event id"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete by Admin",
					"item": [
						{
							"name": "Delete with incorrect commentId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/incorrect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"incorrect"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete with not existing commentId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 404 status code and json data\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"NOT_FOUND\", \"status should be NOT_FOUND\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"commentId\", comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 204 status code and empty body\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"    pm.response.to.be.not.withBody;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{commentId}}",
											"description": "(Required) current comment id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comments after deleting",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.deleteCommentByAdmin(comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Result should be empty list\", function () {\r",
											"    pm.expect(pm.response.json().length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get event after deleting published comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const comment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.deleteCommentByAdmin(comment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch event data\", function () {\r",
											"    pm.expect(target.commentsState).equal(\"PUBLIC\", \"commentsState should be equal to PUBLIC\");\r",
											"    pm.expect(target.publishedComments).equal(0, \"publishedComments should be equal to 0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get event after deleting pending comment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        const comment1 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        const comment2 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.addComment(initiator.id, event.id, rnd.getComment());\r",
											"        await api.publishComments(initiator.id, comment1.id);\r",
											"        await api.deleteCommentByAdmin(comment2.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
											"    pm.expect(target).to.have.property('commentsState');\r",
											"    pm.expect(target).to.have.property('publishedComments');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should mutch event data\", function () {\r",
											"    pm.expect(target.commentsState).equal(\"MODERATED\", \"commentsState should be equal to MODERATED\");\r",
											"    pm.expect(target.publishedComments).equal(2, \"publishedComments should be equal to 2\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{requestBody}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) event id"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Find by Commentator",
					"item": [
						{
							"name": "Find with incorrect userId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/incorrect/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"incorrect",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with not existing userId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Result should be empty list\", function () {\r",
											"    pm.expect(pm.response.json().length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/0/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"0",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with incorrect state",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?state=incorrect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "state",
											"value": "incorrect"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with incorrect rangeStart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?rangeStart=2020-10-10T09:10:11",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "rangeStart",
											"value": "2020-10-10T09:10:11"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with incorrect rangeEnd",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?rangeEnd=2020-10-10T09:10:11",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "rangeEnd",
											"value": "2020-10-10T09:10:11"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with incorrect from",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?from=incorrect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "from",
											"value": "incorrect"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with negative from",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?from=-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "from",
											"value": "-1"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with incorrect size",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?size=incorrect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "size",
											"value": "incorrect"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with zero size",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?size=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "size",
											"value": "0"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with state",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const comment1 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment2 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        const rejectedComment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.rejectComments(initiator.id, rejectedComment.id);\r",
											"        const publishedComment = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.publishComments(initiator.id, publishedComment.id);\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.collectionVariables.set(\"comments\", [comment2, comment1]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const comments = pm.collectionVariables.get(\"comments\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Result should contain correct number of comments\", function () {\r",
											"    pm.expect(target.length).to.eql(comments.length);\r",
											"});\r",
											"\r",
											"for (i = 0; i < comments.length; i++) {\r",
											"    var source = comments[i];\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] should contain fields: id, event, createdOn, text, state\", function () {\r",
											"        pm.expect(target[i]).to.have.property('id');\r",
											"        pm.expect(target[i]).to.have.property('event');\r",
											"        pm.expect(target[i]).to.have.property('createdOn');\r",
											"        pm.expect(target[i]).to.have.property('text');\r",
											"        pm.expect(target[i]).to.have.property('state');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"        pm.expect(target[i].event).to.have.property('id');\r",
											"        pm.expect(target[i].event).to.have.property('title');\r",
											"        pm.expect(target[i].event).to.have.property('eventDate');\r",
											"        pm.expect(target[i].event).to.have.property('commentsState');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] data should mutch request data\", function () {\r",
											"        pm.expect(target[i].id).equal(source.id, \"result[\" + i + \"].id should be equal to comment`s id\");\r",
											"        pm.expect(target[i].createdOn).equal(source.createdOn, \"result[\" + i + \"].createdOn should be equal to comment`s createdOn\");\r",
											"        pm.expect(target[i].text).equal(source.text, \"result[\" + i + \"].text should be equal to comment`s text\");\r",
											"        pm.expect(target[i].state).equal(source.state, \"result[\" + i + \"].text should be equal to comment`s state\");\r",
											"        pm.expect(target[i].event.id).equal(source.event.id, \"result[\" + i + \"].event.id should be equal to id of comment`s event\");\r",
											"        pm.expect(target[i].event.title).equal(source.event.title, \"result[\" + i + \"].event.title should be equal to title of comment`s event\");\r",
											"        pm.expect(target[i].event.eventDate).equal(source.event.eventDate, \"result[\" + i + \"].event.date should be equal to eventDate of comment`s event\");\r",
											"        pm.expect(target[i].event.commentsState).equal(source.event.commentsState, \"result[\" + i + \"].event.commentsState should be equal to commentsState of comment`s event\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?state=PENDING",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "state",
											"value": "PENDING"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with date range",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 1000));\r",
											"        const moment = require('moment');\r",
											"        const from = moment().format('YYYY-MM-DD HH:mm:ss');\r",
											"        await new Promise(resolve => setTimeout(resolve, 1000));\r",
											"        const comment1 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment2 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 1000));\r",
											"        const to = moment().format('YYYY-MM-DD HH:mm:ss');\r",
											"        await new Promise(resolve => setTimeout(resolve, 1000));\r",
											"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.collectionVariables.set(\"comments\", [comment2, comment1]);\r",
											"        pm.request.removeQueryParams(['rangeStart', 'rangeEnd']);\r",
											"        pm.request.addQueryParams([`rangeStart=` + from, `rangeEnd=` + to]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const comments = pm.collectionVariables.get(\"comments\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Result should contain correct number of comments\", function () {\r",
											"    pm.expect(target.length).to.eql(comments.length);\r",
											"});\r",
											"\r",
											"for (i = 0; i < comments.length; i++) {\r",
											"    var source = comments[i];\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] should contain fields: id, event, createdOn, text, state\", function () {\r",
											"        pm.expect(target[i]).to.have.property('id');\r",
											"        pm.expect(target[i]).to.have.property('event');\r",
											"        pm.expect(target[i]).to.have.property('createdOn');\r",
											"        pm.expect(target[i]).to.have.property('text');\r",
											"        pm.expect(target[i]).to.have.property('state');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"        pm.expect(target[i].event).to.have.property('id');\r",
											"        pm.expect(target[i].event).to.have.property('title');\r",
											"        pm.expect(target[i].event).to.have.property('eventDate');\r",
											"        pm.expect(target[i].event).to.have.property('commentsState');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] data should mutch request data\", function () {\r",
											"        pm.expect(target[i].id).equal(source.id, \"result[\" + i + \"].id should be equal to comment`s id\");\r",
											"        pm.expect(target[i].createdOn).equal(source.createdOn, \"result[\" + i + \"].createdOn should be equal to comment`s createdOn\");\r",
											"        pm.expect(target[i].text).equal(source.text, \"result[\" + i + \"].text should be equal to comment`s text\");\r",
											"        pm.expect(target[i].state).equal(source.state, \"result[\" + i + \"].text should be equal to comment`s state\");\r",
											"        pm.expect(target[i].event.id).equal(source.event.id, \"result[\" + i + \"].event.id should be equal to id of comment`s event\");\r",
											"        pm.expect(target[i].event.title).equal(source.event.title, \"result[\" + i + \"].event.title should be equal to title of comment`s event\");\r",
											"        pm.expect(target[i].event.eventDate).equal(source.event.eventDate, \"result[\" + i + \"].event.date should be equal to eventDate of comment`s event\");\r",
											"        pm.expect(target[i].event.commentsState).equal(source.event.commentsState, \"result[\" + i + \"].event.commentsState should be equal to commentsState of comment`s event\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?rangeStart=&rangeEnd=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "rangeStart",
											"value": ""
										},
										{
											"key": "rangeEnd",
											"value": ""
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with pageable",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment1 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment2 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.collectionVariables.set(\"comments\", [comment2, comment1]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const comments = pm.collectionVariables.get(\"comments\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Result should contain correct number of comments\", function () {\r",
											"    pm.expect(target.length).to.eql(comments.length);\r",
											"});\r",
											"\r",
											"for (i = 0; i < comments.length; i++) {\r",
											"    var source = comments[i];\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] should contain fields: id, event, createdOn, text, state\", function () {\r",
											"        pm.expect(target[i]).to.have.property('id');\r",
											"        pm.expect(target[i]).to.have.property('event');\r",
											"        pm.expect(target[i]).to.have.property('createdOn');\r",
											"        pm.expect(target[i]).to.have.property('text');\r",
											"        pm.expect(target[i]).to.have.property('state');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"        pm.expect(target[i].event).to.have.property('id');\r",
											"        pm.expect(target[i].event).to.have.property('title');\r",
											"        pm.expect(target[i].event).to.have.property('eventDate');\r",
											"        pm.expect(target[i].event).to.have.property('commentsState');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] data should mutch request data\", function () {\r",
											"        pm.expect(target[i].id).equal(source.id, \"result[\" + i + \"].id should be equal to comment`s id\");\r",
											"        pm.expect(target[i].createdOn).equal(source.createdOn, \"result[\" + i + \"].createdOn should be equal to comment`s createdOn\");\r",
											"        pm.expect(target[i].text).equal(source.text, \"result[\" + i + \"].text should be equal to comment`s text\");\r",
											"        pm.expect(target[i].state).equal(source.state, \"result[\" + i + \"].text should be equal to comment`s state\");\r",
											"        pm.expect(target[i].event.id).equal(source.event.id, \"result[\" + i + \"].event.id should be equal to id of comment`s event\");\r",
											"        pm.expect(target[i].event.title).equal(source.event.title, \"result[\" + i + \"].event.title should be equal to title of comment`s event\");\r",
											"        pm.expect(target[i].event.eventDate).equal(source.event.eventDate, \"result[\" + i + \"].event.date should be equal to eventDate of comment`s event\");\r",
											"        pm.expect(target[i].event.commentsState).equal(source.event.commentsState, \"result[\" + i + \"].event.commentsState should be equal to commentsState of comment`s event\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?from=1&size=2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "from",
											"value": "1"
										},
										{
											"key": "size",
											"value": "2"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find without params",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        await api.addComment(initiator.id, event.id, rnd.getComment());\r",
											"        const comment1 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment2 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment3 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.rejectComments(initiator.id, comment1.id);\r",
											"        comment1.state = \"REJECTED\";\r",
											"        await api.publishComments(initiator.id, comment2.id);\r",
											"        comment2.state = \"PUBLISHED\";\r",
											"        pm.collectionVariables.set(\"userId\", commentator.id);\r",
											"        pm.collectionVariables.set(\"comments\", [comment3, comment2, comment1]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const comments = pm.collectionVariables.get(\"comments\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Result should contain correct number of comments\", function () {\r",
											"    pm.expect(target.length).to.eql(comments.length);\r",
											"});\r",
											"\r",
											"for (i = 0; i < comments.length; i++) {\r",
											"    var source = comments[i];\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] should contain fields: id, event, createdOn, text, state\", function () {\r",
											"        pm.expect(target[i]).to.have.property('id');\r",
											"        pm.expect(target[i]).to.have.property('event');\r",
											"        pm.expect(target[i]).to.have.property('createdOn');\r",
											"        pm.expect(target[i]).to.have.property('text');\r",
											"        pm.expect(target[i]).to.have.property('state');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"        pm.expect(target[i].event).to.have.property('id');\r",
											"        pm.expect(target[i].event).to.have.property('title');\r",
											"        pm.expect(target[i].event).to.have.property('eventDate');\r",
											"        pm.expect(target[i].event).to.have.property('commentsState');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] data should mutch request data\", function () {\r",
											"        pm.expect(target[i].id).equal(source.id, \"result[\" + i + \"].id should be equal to comment`s id\");\r",
											"        pm.expect(target[i].createdOn).equal(source.createdOn, \"result[\" + i + \"].createdOn should be equal to comment`s createdOn\");\r",
											"        pm.expect(target[i].text).equal(source.text, \"result[\" + i + \"].text should be equal to comment`s text\");\r",
											"        pm.expect(target[i].state).equal(source.state, \"result[\" + i + \"].text should be equal to comment`s state\");\r",
											"        pm.expect(target[i].event.id).equal(source.event.id, \"result[\" + i + \"].event.id should be equal to id of comment`s event\");\r",
											"        pm.expect(target[i].event.title).equal(source.event.title, \"result[\" + i + \"].event.title should be equal to title of comment`s event\");\r",
											"        pm.expect(target[i].event.eventDate).equal(source.event.eventDate, \"result[\" + i + \"].event.date should be equal to eventDate of comment`s event\");\r",
											"        pm.expect(target[i].event.commentsState).equal(source.event.commentsState, \"result[\" + i + \"].event.commentsState should be equal to commentsState of comment`s event\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Find by Initiator",
					"item": [
						{
							"name": "Find with incorrect userId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/incorrect/comments/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"incorrect",
										"comments",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with not existing userId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Result should be empty list\", function () {\r",
											"    pm.expect(pm.response.json().length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/0/comments/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"0",
										"comments",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with incorrect eventId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events?eventId=incorrect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events"
									],
									"query": [
										{
											"key": "eventId",
											"value": "incorrect"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with incorrect state",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events?state=incorrect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events"
									],
									"query": [
										{
											"key": "state",
											"value": "incorrect"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with incorrect rangeStart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events?rangeStart=2020-10-10T09:10:11",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events"
									],
									"query": [
										{
											"key": "rangeStart",
											"value": "2020-10-10T09:10:11"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with incorrect rangeEnd",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events?rangeEnd=2020-10-10T09:10:11",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events"
									],
									"query": [
										{
											"key": "rangeEnd",
											"value": "2020-10-10T09:10:11"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with incorrect from",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events?from=incorrect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events"
									],
									"query": [
										{
											"key": "from",
											"value": "incorrect"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with negative from",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events?from=-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events"
									],
									"query": [
										{
											"key": "from",
											"value": "-1"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with incorrect size",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events?size=incorrect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events"
									],
									"query": [
										{
											"key": "size",
											"value": "incorrect"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with zero size",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events?size=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events"
									],
									"query": [
										{
											"key": "size",
											"value": "0"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with eventId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event1 = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event1.id);\r",
											"        const event2 = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event2.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        await api.addComment(commentator.id, event2.id, rnd.getComment());\r",
											"        await api.addComment(commentator.id, event2.id, rnd.getComment());\r",
											"        const comment1 = await api.addComment(commentator.id, event1.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment2 = await api.addComment(initiator.id, event1.id, rnd.getComment());\r",
											"        comment1.commentator = commentator;\r",
											"        comment2.commentator = initiator;\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.collectionVariables.set(\"comments\", [comment2, comment1]);\r",
											"        pm.request.removeQueryParams(['eventId']);\r",
											"        pm.request.addQueryParams([`eventId=` + event1.id]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const comments = pm.collectionVariables.get(\"comments\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Result should contain correct number of comments\", function () {\r",
											"    pm.expect(target.length).to.eql(comments.length);\r",
											"});\r",
											"\r",
											"for (i = 0; i < comments.length; i++) {\r",
											"    var source = comments[i];\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] should contain fields: id, commentator, event, createdOn, text, state\", function () {\r",
											"        pm.expect(target[i]).to.have.property('id');\r",
											"        pm.expect(target[i]).to.have.property('commentator');\r",
											"        pm.expect(target[i]).to.have.property('event');\r",
											"        pm.expect(target[i]).to.have.property('createdOn');\r",
											"        pm.expect(target[i]).to.have.property('text');\r",
											"        pm.expect(target[i]).to.have.property('state');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"        pm.expect(target[i].event).to.have.property('id');\r",
											"        pm.expect(target[i].event).to.have.property('title');\r",
											"        pm.expect(target[i].event).to.have.property('eventDate');\r",
											"        pm.expect(target[i].event).to.have.property('commentsState');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].commentator should contain fields: id, name\", function () {\r",
											"        pm.expect(target[i].commentator).to.have.property('id');\r",
											"        pm.expect(target[i].commentator).to.have.property('name');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] data should mutch request data\", function () {\r",
											"        pm.expect(target[i].id).equal(source.id, \"result[\" + i + \"].id should be equal to comment`s id\");\r",
											"        pm.expect(target[i].commentator.id).equal(source.commentator.id, \"result[\" + i + \"].commentator.id should be equal to commentator id\");\r",
											"        pm.expect(target[i].commentator.name).equal(source.commentator.name, \"result[\" + i + \"].commentator.name should be equal to commentator name\");\r",
											"        pm.expect(target[i].createdOn).equal(source.createdOn, \"result[\" + i + \"].createdOn should be equal to comment`s createdOn\");\r",
											"        pm.expect(target[i].text).equal(source.text, \"result[\" + i + \"].text should be equal to comment`s text\");\r",
											"        pm.expect(target[i].state).equal(source.state, \"result[\" + i + \"].text should be equal to comment`s state\");\r",
											"        pm.expect(target[i].event.id).equal(source.event.id, \"result[\" + i + \"].event.id should be equal to id of comment`s event\");\r",
											"        pm.expect(target[i].event.title).equal(source.event.title, \"result[\" + i + \"].event.title should be equal to title of comment`s event\");\r",
											"        pm.expect(target[i].event.eventDate).equal(source.event.eventDate, \"result[\" + i + \"].event.date should be equal to eventDate of comment`s event\");\r",
											"        pm.expect(target[i].event.commentsState).equal(source.event.commentsState, \"result[\" + i + \"].event.commentsState should be equal to commentsState of comment`s event\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events?eventId=",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events"
									],
									"query": [
										{
											"key": "eventId",
											"value": ""
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with state",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event1 = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event1.id);\r",
											"        const event2 = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event2.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        const comment1 = await api.addComment(commentator.id, event1.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment2 = await api.addComment(commentator.id, event2.id, rnd.getComment());\r",
											"        await api.addComment(commentator.id, event2.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment3 = await api.addComment(initiator.id, event2.id, rnd.getComment());\r",
											"        await api.publishComments(initiator.id, comment2.id);\r",
											"        comment1.commentator = commentator;\r",
											"        comment2.commentator = commentator;\r",
											"        comment3.commentator = initiator;\r",
											"        comment2.state = \"PUBLISHED\";\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.collectionVariables.set(\"comments\", [comment3, comment2, comment1]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const comments = pm.collectionVariables.get(\"comments\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Result should contain correct number of comments\", function () {\r",
											"    pm.expect(target.length).to.eql(comments.length);\r",
											"});\r",
											"\r",
											"for (i = 0; i < comments.length; i++) {\r",
											"    var source = comments[i];\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] should contain fields: id, commentator, event, createdOn, text, state\", function () {\r",
											"        pm.expect(target[i]).to.have.property('id');\r",
											"        pm.expect(target[i]).to.have.property('commentator');\r",
											"        pm.expect(target[i]).to.have.property('event');\r",
											"        pm.expect(target[i]).to.have.property('createdOn');\r",
											"        pm.expect(target[i]).to.have.property('text');\r",
											"        pm.expect(target[i]).to.have.property('state');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"        pm.expect(target[i].event).to.have.property('id');\r",
											"        pm.expect(target[i].event).to.have.property('title');\r",
											"        pm.expect(target[i].event).to.have.property('eventDate');\r",
											"        pm.expect(target[i].event).to.have.property('commentsState');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].commentator should contain fields: id, name\", function () {\r",
											"        pm.expect(target[i].commentator).to.have.property('id');\r",
											"        pm.expect(target[i].commentator).to.have.property('name');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] data should mutch request data\", function () {\r",
											"        pm.expect(target[i].id).equal(source.id, \"result[\" + i + \"].id should be equal to comment`s id\");\r",
											"        pm.expect(target[i].commentator.id).equal(source.commentator.id, \"result[\" + i + \"].commentator.id should be equal to commentator id\");\r",
											"        pm.expect(target[i].commentator.name).equal(source.commentator.name, \"result[\" + i + \"].commentator.name should be equal to commentator name\");\r",
											"        pm.expect(target[i].createdOn).equal(source.createdOn, \"result[\" + i + \"].createdOn should be equal to comment`s createdOn\");\r",
											"        pm.expect(target[i].text).equal(source.text, \"result[\" + i + \"].text should be equal to comment`s text\");\r",
											"        pm.expect(target[i].state).equal(source.state, \"result[\" + i + \"].text should be equal to comment`s state\");\r",
											"        pm.expect(target[i].event.id).equal(source.event.id, \"result[\" + i + \"].event.id should be equal to id of comment`s event\");\r",
											"        pm.expect(target[i].event.title).equal(source.event.title, \"result[\" + i + \"].event.title should be equal to title of comment`s event\");\r",
											"        pm.expect(target[i].event.eventDate).equal(source.event.eventDate, \"result[\" + i + \"].event.date should be equal to eventDate of comment`s event\");\r",
											"        pm.expect(target[i].event.commentsState).equal(source.event.commentsState, \"result[\" + i + \"].event.commentsState should be equal to commentsState of comment`s event\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events?state=PUBLISHED",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events"
									],
									"query": [
										{
											"key": "state",
											"value": "PUBLISHED"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with date range",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event1 = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event1.id);\r",
											"        const event2 = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event2.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"\r",
											"        await api.addComment(commentator.id, event1.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 1000));\r",
											"        const moment = require('moment');\r",
											"        const from = moment().format('YYYY-MM-DD HH:mm:ss');\r",
											"        await new Promise(resolve => setTimeout(resolve, 1000));\r",
											"        const comment1 = await api.addComment(commentator.id, event2.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 1000));\r",
											"        const comment2 = await api.addComment(initiator.id, event1.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 1000));\r",
											"        const to = moment().format('YYYY-MM-DD HH:mm:ss');\r",
											"        await new Promise(resolve => setTimeout(resolve, 1000));\r",
											"        await api.addComment(commentator.id, event1.id, rnd.getComment());\r",
											"        comment1.commentator = commentator;\r",
											"        comment2.commentator = initiator;\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.collectionVariables.set(\"comments\", [comment2, comment1]);\r",
											"\r",
											"        pm.request.removeQueryParams(['rangeStart', 'rangeEnd']);\r",
											"        pm.request.addQueryParams([`rangeStart=` + from, `rangeEnd=` + to]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const comments = pm.collectionVariables.get(\"comments\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Result should contain correct number of comments\", function () {\r",
											"    pm.expect(target.length).to.eql(comments.length);\r",
											"});\r",
											"\r",
											"for (i = 0; i < comments.length; i++) {\r",
											"    var source = comments[i];\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] should contain fields: id, commentator, event, createdOn, text, state\", function () {\r",
											"        pm.expect(target[i]).to.have.property('id');\r",
											"        pm.expect(target[i]).to.have.property('commentator');\r",
											"        pm.expect(target[i]).to.have.property('event');\r",
											"        pm.expect(target[i]).to.have.property('createdOn');\r",
											"        pm.expect(target[i]).to.have.property('text');\r",
											"        pm.expect(target[i]).to.have.property('state');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"        pm.expect(target[i].event).to.have.property('id');\r",
											"        pm.expect(target[i].event).to.have.property('title');\r",
											"        pm.expect(target[i].event).to.have.property('eventDate');\r",
											"        pm.expect(target[i].event).to.have.property('commentsState');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].commentator should contain fields: id, name\", function () {\r",
											"        pm.expect(target[i].commentator).to.have.property('id');\r",
											"        pm.expect(target[i].commentator).to.have.property('name');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] data should mutch request data\", function () {\r",
											"        pm.expect(target[i].id).equal(source.id, \"result[\" + i + \"].id should be equal to comment`s id\");\r",
											"        pm.expect(target[i].commentator.id).equal(source.commentator.id, \"result[\" + i + \"].commentator.id should be equal to commentator id\");\r",
											"        pm.expect(target[i].commentator.name).equal(source.commentator.name, \"result[\" + i + \"].commentator.name should be equal to commentator name\");\r",
											"        pm.expect(target[i].createdOn).equal(source.createdOn, \"result[\" + i + \"].createdOn should be equal to comment`s createdOn\");\r",
											"        pm.expect(target[i].text).equal(source.text, \"result[\" + i + \"].text should be equal to comment`s text\");\r",
											"        pm.expect(target[i].state).equal(source.state, \"result[\" + i + \"].text should be equal to comment`s state\");\r",
											"        pm.expect(target[i].event.id).equal(source.event.id, \"result[\" + i + \"].event.id should be equal to id of comment`s event\");\r",
											"        pm.expect(target[i].event.title).equal(source.event.title, \"result[\" + i + \"].event.title should be equal to title of comment`s event\");\r",
											"        pm.expect(target[i].event.eventDate).equal(source.event.eventDate, \"result[\" + i + \"].event.date should be equal to eventDate of comment`s event\");\r",
											"        pm.expect(target[i].event.commentsState).equal(source.event.commentsState, \"result[\" + i + \"].event.commentsState should be equal to commentsState of comment`s event\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events?rangeStart=&rangeEnd",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events"
									],
									"query": [
										{
											"key": "rangeStart",
											"value": ""
										},
										{
											"key": "rangeEnd",
											"value": null
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with pageable",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event1 = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event1.id);\r",
											"        const event2 = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event2.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"\r",
											"        await api.addComment(commentator.id, event1.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment1 = await api.addComment(commentator.id, event2.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment2 = await api.addComment(initiator.id, event1.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        await api.addComment(commentator.id, event1.id, rnd.getComment());\r",
											"        comment1.commentator = commentator;\r",
											"        comment2.commentator = initiator;\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.collectionVariables.set(\"comments\", [comment2, comment1]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const comments = pm.collectionVariables.get(\"comments\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Result should contain correct number of comments\", function () {\r",
											"    pm.expect(target.length).to.eql(comments.length);\r",
											"});\r",
											"\r",
											"for (i = 0; i < comments.length; i++) {\r",
											"    var source = comments[i];\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] should contain fields: id, commentator, event, createdOn, text, state\", function () {\r",
											"        pm.expect(target[i]).to.have.property('id');\r",
											"        pm.expect(target[i]).to.have.property('commentator');\r",
											"        pm.expect(target[i]).to.have.property('event');\r",
											"        pm.expect(target[i]).to.have.property('createdOn');\r",
											"        pm.expect(target[i]).to.have.property('text');\r",
											"        pm.expect(target[i]).to.have.property('state');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"        pm.expect(target[i].event).to.have.property('id');\r",
											"        pm.expect(target[i].event).to.have.property('title');\r",
											"        pm.expect(target[i].event).to.have.property('eventDate');\r",
											"        pm.expect(target[i].event).to.have.property('commentsState');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].commentator should contain fields: id, name\", function () {\r",
											"        pm.expect(target[i].commentator).to.have.property('id');\r",
											"        pm.expect(target[i].commentator).to.have.property('name');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] data should mutch request data\", function () {\r",
											"        pm.expect(target[i].id).equal(source.id, \"result[\" + i + \"].id should be equal to comment`s id\");\r",
											"        pm.expect(target[i].commentator.id).equal(source.commentator.id, \"result[\" + i + \"].commentator.id should be equal to commentator id\");\r",
											"        pm.expect(target[i].commentator.name).equal(source.commentator.name, \"result[\" + i + \"].commentator.name should be equal to commentator name\");\r",
											"        pm.expect(target[i].createdOn).equal(source.createdOn, \"result[\" + i + \"].createdOn should be equal to comment`s createdOn\");\r",
											"        pm.expect(target[i].text).equal(source.text, \"result[\" + i + \"].text should be equal to comment`s text\");\r",
											"        pm.expect(target[i].state).equal(source.state, \"result[\" + i + \"].text should be equal to comment`s state\");\r",
											"        pm.expect(target[i].event.id).equal(source.event.id, \"result[\" + i + \"].event.id should be equal to id of comment`s event\");\r",
											"        pm.expect(target[i].event.title).equal(source.event.title, \"result[\" + i + \"].event.title should be equal to title of comment`s event\");\r",
											"        pm.expect(target[i].event.eventDate).equal(source.event.eventDate, \"result[\" + i + \"].event.date should be equal to eventDate of comment`s event\");\r",
											"        pm.expect(target[i].event.commentsState).equal(source.event.commentsState, \"result[\" + i + \"].event.commentsState should be equal to commentsState of comment`s event\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events?from=1&size=2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events"
									],
									"query": [
										{
											"key": "from",
											"value": "1"
										},
										{
											"key": "size",
											"value": "2"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find without params",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event1 = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event1.id);\r",
											"        const event2 = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event2.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"\r",
											"        const comment1 = await api.addComment(commentator.id, event1.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment2 = await api.addComment(commentator.id, event2.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment3 = await api.addComment(initiator.id, event1.id, rnd.getComment());\r",
											"        comment1.commentator = commentator;\r",
											"        comment2.commentator = commentator;\r",
											"        comment3.commentator = initiator;\r",
											"        pm.collectionVariables.set(\"userId\", initiator.id);\r",
											"        pm.collectionVariables.set(\"comments\", [comment3, comment2, comment1]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const comments = pm.collectionVariables.get(\"comments\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Result should contain correct number of comments\", function () {\r",
											"    pm.expect(target.length).to.eql(comments.length);\r",
											"});\r",
											"\r",
											"for (i = 0; i < comments.length; i++) {\r",
											"    var source = comments[i];\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] should contain fields: id, commentator, event, createdOn, text, state\", function () {\r",
											"        pm.expect(target[i]).to.have.property('id');\r",
											"        pm.expect(target[i]).to.have.property('commentator');\r",
											"        pm.expect(target[i]).to.have.property('event');\r",
											"        pm.expect(target[i]).to.have.property('createdOn');\r",
											"        pm.expect(target[i]).to.have.property('text');\r",
											"        pm.expect(target[i]).to.have.property('state');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].event should contain fields: id, title, eventDate, commentsState\", function () {\r",
											"        pm.expect(target[i].event).to.have.property('id');\r",
											"        pm.expect(target[i].event).to.have.property('title');\r",
											"        pm.expect(target[i].event).to.have.property('eventDate');\r",
											"        pm.expect(target[i].event).to.have.property('commentsState');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"].commentator should contain fields: id, name\", function () {\r",
											"        pm.expect(target[i].commentator).to.have.property('id');\r",
											"        pm.expect(target[i].commentator).to.have.property('name');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] data should mutch request data\", function () {\r",
											"        pm.expect(target[i].id).equal(source.id, \"result[\" + i + \"].id should be equal to comment`s id\");\r",
											"        pm.expect(target[i].commentator.id).equal(source.commentator.id, \"result[\" + i + \"].commentator.id should be equal to commentator id\");\r",
											"        pm.expect(target[i].commentator.name).equal(source.commentator.name, \"result[\" + i + \"].commentator.name should be equal to commentator name\");\r",
											"        pm.expect(target[i].createdOn).equal(source.createdOn, \"result[\" + i + \"].createdOn should be equal to comment`s createdOn\");\r",
											"        pm.expect(target[i].text).equal(source.text, \"result[\" + i + \"].text should be equal to comment`s text\");\r",
											"        pm.expect(target[i].state).equal(source.state, \"result[\" + i + \"].text should be equal to comment`s state\");\r",
											"        pm.expect(target[i].event.id).equal(source.event.id, \"result[\" + i + \"].event.id should be equal to id of comment`s event\");\r",
											"        pm.expect(target[i].event.title).equal(source.event.title, \"result[\" + i + \"].event.title should be equal to title of comment`s event\");\r",
											"        pm.expect(target[i].event.eventDate).equal(source.event.eventDate, \"result[\" + i + \"].event.date should be equal to eventDate of comment`s event\");\r",
											"        pm.expect(target[i].event.commentsState).equal(source.event.commentsState, \"result[\" + i + \"].event.commentsState should be equal to commentsState of comment`s event\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										"events"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}",
											"description": "(Required) commentator id"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Find by Event",
					"item": [
						{
							"name": "Find with incorrect eventId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/incorrect/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"incorrect",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with not existing eventId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Result should be empty list\", function () {\r",
											"    pm.expect(pm.response.json().length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/0/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"0",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with incorrect from",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:eventId/comments?from=incorrect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId",
										"comments"
									],
									"query": [
										{
											"key": "from",
											"value": "incorrect"
										}
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with negative from",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:eventId/comments?from=-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId",
										"comments"
									],
									"query": [
										{
											"key": "from",
											"value": "-1"
										}
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with incorrect size",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:eventId/comments?size=incorrect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId",
										"comments"
									],
									"query": [
										{
											"key": "size",
											"value": "incorrect"
										}
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with zero size",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 400 status code and json data\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Event should contain fields: status, reason, message, errors, timestamp\", function () {\r",
											"    pm.expect(target).to.have.property('status');\r",
											"    pm.expect(target).to.have.property('reason');\r",
											"    pm.expect(target).to.have.property('message');\r",
											"    pm.expect(target).to.have.property('errors');\r",
											"    pm.expect(target).to.have.property('timestamp');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data should have correct status\", function () {\r",
											"    pm.expect(target.status).equal(\"BAD_REQUEST\", \"status should be BAD_REQUEST\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:eventId/comments?size=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId",
										"comments"
									],
									"query": [
										{
											"key": "size",
											"value": "0"
										}
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}",
											"description": "(Required) event id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find with pageable",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"\r",
											"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment1 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment2 = await api.addComment(initiator.id, event.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        comment1.commentator = commentator;\r",
											"        comment2.commentator = initiator;\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.collectionVariables.set(\"comments\", [comment2, comment1]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const comments = pm.collectionVariables.get(\"comments\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Result should contain correct number of comments\", function () {\r",
											"    pm.expect(target.length).to.eql(comments.length);\r",
											"});\r",
											"\r",
											"for (i = 0; i < comments.length; i++) {\r",
											"    var source = comments[i];\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] should contain fields: id, commentator, createdOn, text and not contain state, event\", function () {\r",
											"        pm.expect(target[i]).to.have.property('id');\r",
											"        pm.expect(target[i]).to.have.property('commentator');\r",
											"        pm.expect(target[i]).to.have.property('createdOn');\r",
											"        pm.expect(target[i]).to.have.property('text');\r",
											"        pm.expect(target[i]).to.not.have.property('event');\r",
											"        pm.expect(target[i]).to.not.have.property('state');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] data should mutch request data\", function () {\r",
											"        pm.expect(target[i].id).equal(source.id, \"result[\" + i + \"].id should be equal to comment`s id\");\r",
											"        pm.expect(target[i].commentator).equal(source.commentator.name, \"result[\" + i + \"].commentator.name should be equal to commentator name\");\r",
											"        pm.expect(target[i].createdOn).equal(source.createdOn, \"result[\" + i + \"].createdOn should be equal to comment`s createdOn\");\r",
											"        pm.expect(target[i].text).equal(source.text, \"result[\" + i + \"].text should be equal to comment`s text\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:eventId/comments?from=1&size=2",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId",
										"comments"
									],
									"query": [
										{
											"key": "from",
											"value": "1"
										},
										{
											"key": "size",
											"value": "2"
										}
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Find without params",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const initiator = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id, \"MODERATED\"));\r",
											"        await api.publishEvent(event.id);\r",
											"        const commentator = await api.addUser(rnd.getUser());\r",
											"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        const comment1 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await new Promise(resolve => setTimeout(resolve, 10));\r",
											"        const comment2 = await api.addComment(initiator.id, event.id, rnd.getComment());\r",
											"        const comment3 = await api.addComment(commentator.id, event.id, rnd.getComment());\r",
											"        await api.publishComments(initiator.id, comment1.id);\r",
											"        await api.rejectComments(initiator.id, comment3.id);\r",
											"        comment1.commentator = commentator;\r",
											"        comment2.commentator = initiator;\r",
											"        pm.collectionVariables.set(\"eventId\", event.id);\r",
											"        pm.collectionVariables.set(\"comments\", [comment2, comment1]);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error preparing test data.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const comments = pm.collectionVariables.get(\"comments\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Result should contain correct number of comments\", function () {\r",
											"    pm.expect(target.length).to.eql(comments.length);\r",
											"});\r",
											"\r",
											"for (i = 0; i < comments.length; i++) {\r",
											"    var source = comments[i];\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] should contain fields: id, commentator, createdOn, text and not contain state, event\", function () {\r",
											"        pm.expect(target[i]).to.have.property('id');\r",
											"        pm.expect(target[i]).to.have.property('commentator');\r",
											"        pm.expect(target[i]).to.have.property('createdOn');\r",
											"        pm.expect(target[i]).to.have.property('text');\r",
											"        pm.expect(target[i]).to.not.have.property('event');\r",
											"        pm.expect(target[i]).to.not.have.property('state');\r",
											"    });\r",
											"\r",
											"    pm.test(\"result[\" + i + \"] data should mutch request data\", function () {\r",
											"        pm.expect(target[i].id).equal(source.id, \"result[\" + i + \"].id should be equal to comment`s id\");\r",
											"        pm.expect(target[i].commentator).equal(source.commentator.name, \"result[\" + i + \"].commentator.name should be equal to commentator name\");\r",
											"        pm.expect(target[i].createdOn).equal(source.createdOn, \"result[\" + i + \"].createdOn should be equal to comment`s createdOn\");\r",
											"        pm.expect(target[i].text).equal(source.text, \"result[\" + i + \"].text should be equal to comment`s text\");\r",
											"    });\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:eventId/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":eventId",
										"comments"
									],
									"variable": [
										{
											"key": "eventId",
											"value": "{{eventId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Compilations",
			"item": [
				{
					"name": "Add",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let compilation;\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        const commentator = await api.addUser(rnd.getUser());\r",
									"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
									"        await api.addComment(initiator.id, event.id, rnd.getComment());\r",
									"        compilation = rnd.getCompilation(event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Error preparing test data.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(compilation),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Answer should contain 201 status code and json data\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Compilation should contain field events\", function () {\r",
									"    pm.expect(target).to.have.property('events');\r",
									"});\r",
									"\r",
									"pm.test(\"Compilation should contain one event\", function () {\r",
									"    pm.expect(target.events.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
									"    pm.expect(target.events[0]).to.have.property('commentsState');\r",
									"    pm.expect(target.events[0]).to.have.property('publishedComments');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should mutch event data\", function () {\r",
									"    pm.expect(target.events[0].commentsState).equal(\"PUBLIC\", \"commentsState should be equal to PUBLIC\");\r",
									"    pm.expect(target.events[0].publishedComments).equal(2, \"publishedComments should be equal to 2\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/compilations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"compilations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let compilation;\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        const commentator = await api.addUser(rnd.getUser());\r",
									"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
									"        await api.addComment(initiator.id, event.id, rnd.getComment());\r",
									"        const existingCompilatio = await api.addCompilation(rnd.getCompilation(event.id));\r",
									"        compilation = rnd.getCompilation(event.id);\r",
									"        pm.collectionVariables.set(\"compId\", existingCompilatio.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Error preparing test data.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(compilation),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Compilation should contain field events\", function () {\r",
									"    pm.expect(target).to.have.property('events');\r",
									"});\r",
									"\r",
									"pm.test(\"Compilation should contain one event\", function () {\r",
									"    pm.expect(target.events.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
									"    pm.expect(target.events[0]).to.have.property('commentsState');\r",
									"    pm.expect(target.events[0]).to.have.property('publishedComments');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should mutch event data\", function () {\r",
									"    pm.expect(target.events[0].commentsState).equal(\"PUBLIC\", \"commentsState should be equal to PUBLIC\");\r",
									"    pm.expect(target.events[0].publishedComments).equal(2, \"publishedComments should be equal to 2\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/compilations/:compId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"compilations",
								":compId"
							],
							"variable": [
								{
									"key": "compId",
									"value": "{{compId}}",
									"description": "(Required) compilation id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let compilation;\r",
									"    try {\r",
									"        const initiator = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const event = await api.addEvent(initiator.id, rnd.getEvent(category.id));\r",
									"        await api.publishEvent(event.id);\r",
									"        const commentator = await api.addUser(rnd.getUser());\r",
									"        await api.addComment(commentator.id, event.id, rnd.getComment());\r",
									"        await api.addComment(initiator.id, event.id, rnd.getComment());\r",
									"        const existingCompilatio = await api.addCompilation(rnd.getCompilation(event.id));\r",
									"        pm.collectionVariables.set(\"compId\", existingCompilatio.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Error preparing test data.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Answer should contain 200 status code and json data\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Compilation should contain field events\", function () {\r",
									"    pm.expect(target).to.have.property('events');\r",
									"});\r",
									"\r",
									"pm.test(\"Compilation should contain one event\", function () {\r",
									"    pm.expect(target.events.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Event should contain fields: commentsState, publishedComments\", function () {\r",
									"    pm.expect(target.events[0]).to.have.property('commentsState');\r",
									"    pm.expect(target.events[0]).to.have.property('publishedComments');\r",
									"});\r",
									"\r",
									"pm.test(\"Response data should mutch event data\", function () {\r",
									"    pm.expect(target.events[0].commentsState).equal(\"PUBLIC\", \"commentsState should be equal to PUBLIC\");\r",
									"    pm.expect(target.events[0].publishedComments).equal(2, \"publishedComments should be equal to 2\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/compilations/:compId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"compilations",
								":compId"
							],
							"variable": [
								{
									"key": "compId",
									"value": "{{compId}}",
									"description": "(Required) compilation id"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async addComment(userId, eventId, comment, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/comments?eventId=\" + eventId, comment, \"Ошибка при добавлении нового комментария: \", verbose);",
					"    }",
					"",
					"    async updateComment(userId, commentId, comment, verbose=null) {",
					"        return this.patch(\"/users/\" + userId + \"/comments/\" + commentId, comment, \"Ошибка при обновлении комментария: \", verbose);",
					"    }",
					"",
					"    async deleteCommentByCommentator(userId, commentId, verbose=null) {",
					"        this.delete(\"/users/\" + userId + \"/comments/\" + commentId, null, \"Ошибка при удалении комментария комментатором: \", verbose);",
					"    }",
					"",
					"    async deleteCommentByAdmin(commentId, verbose=null) {",
					"        this.delete(\"/admin/comments/\" + commentId, null, \"Ошибка при удалении комментария администратором: \", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async publishComments(userId, ids, verbose=null) {",
					"        return this.patch(\"/users/\" + userId + \"/comments/publish?ids=\" + ids, null, \"Ошибка при публикации комментариев: \", verbose);",
					"    }",
					"",
					"    async rejectComments(userId, ids, verbose=null) {",
					"        return this.patch(\"/users/\" + userId + \"/comments/reject?ids=\" + ids, null, \"Ошибка при отклонении комментариев: \", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async delete(path, body = null, errorText = \"Ошибка при выполнении delete-запроса: \", verbose=null) {",
					"        this.sendRequest(\"DELETE\", path, body, errorText, verbose, false);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null, returnBody = true, timeout = 0) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    if (returnBody) {",
					"                        resolve(response.json());",
					"                    } else {",
					"                        resolve(null);",
					"                    }",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId, comState=null) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"            commentsState: comState,",
					"        }",
					"    }",
					"",
					"    getComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "requestBody",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "eventId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "response",
			"value": "",
			"type": "string"
		},
		{
			"key": "commentsState",
			"value": "",
			"type": "string"
		},
		{
			"key": "currentDate",
			"value": "",
			"type": "string"
		},
		{
			"key": "event",
			"value": "",
			"type": "string"
		},
		{
			"key": "commentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "comments",
			"value": "",
			"type": "string"
		},
		{
			"key": "compId",
			"value": "",
			"type": "string"
		}
	]
}